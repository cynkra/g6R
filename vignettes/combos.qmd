---
title: "Combos"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{g6R}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, message=FALSE}
library(shiny)
library(g6R)
```

## Introduction

Combos are a way to group nodes in a graph. They can be used to represent hierarchical structures or to visually organize nodes. In `{g6R}`, combos can be created from a __dataframe__ or a __list__ such as:

```r
combos <- data.frame(id = as.character(1:2))

# or
combos <- list(
  list(id = "1", label = "Combo 1"),
  list(id = "2", label = "Combo 2")
)
```

## Data properties

`{g6R}` combos are allowed to have the following properties:

- `id`: a unique identifier for the combo, required.
- `type`: the type of the combo.
- `data`: custom data for the combo that can be retrieved.
- `style`: style properties. A comprehensive list is available [here](https://g6.antv.antgroup.com/en/manual/element/combo/build-in/base-combo#style).
- `states`: initial [states](https://g6.antv.antgroup.com/en/manual/element/combo/build-in/base-combo#state).
- `combo`: id of the parent combo if any.

### Combo types

There are 2 main combo types, `circle` and `rect`:

```{r}
combos <- data.frame(
  id = c("combo1", "combo2", "combo3"),
  type = c("circle", "rect", "circle"),
  combo = c("combo3", "combo3", NA)
)
nodes <- data.frame(
  id = as.character(1:4),
  combo = c(
    "combo1",
    "combo1",
    "combo2",
    "combo2"
  )
)

g6(nodes, combos = combos) |>
  g6_layout(antv_dagre_layout()) |>
  g6_options(
    animation = FALSE,
    node = list(
      style = list(
        labelText = JS(
          "(d) => {
            return d.id
          }"
        )
      )
    ),
    combo = list(
      style = list(
        lineWidth = 2,
        labelText = JS(
          "(d) => {
            return d.id
          }"
        )
      )
    )
  ) |>
  g6_behaviors(
    collapse_expand(),
    drag_element(dropEffect = "link")
  )
```

By using `drag_element(dropEffect = "link")`, you can drag nodes into combos, which will automatically create a link between the node and the combo in the graph data. We provide more examples in the Shiny vignette (TBD).

Like for the edges, we implemented a custom combo type `circle-combo-with-extra-button`, which adds a button to bottom of the combo. This button can be used to collapse or expand the combo:

```{r}
combos <- data.frame(
  id = c("combo1"),
  type = "circle-combo-with-extra-button"
)

nodes <- data.frame(
  id = as.character(1),
  combo = c("combo1")
)

g6(nodes, combos = combos, height = "200px") |>
  g6_layout(antv_dagre_layout()) |>
  g6_options(
    animation = FALSE,
    node = list(
      style = list(
        labelText = JS(
          "(d) => {
            return d.id
          }"
        )
      )
    ),
    combo = list(
      style = list(
        lineWidth = 2,
        labelText = JS(
          "(d) => {
            return d.id
          }"
        )
      )
    )
  ) |>
  g6_behaviors(
    collapse_expand(),
    drag_element()
  )
```

### Styling combos

The `g6` JavaScript library exposes a wide range of style properties for combos, which can be set in the `style` property of the combo data. We list below the most outstanding properties, but you can find a comprehensive list in the [documentation](https://g6.antv.antgroup.com/en/manual/element/combo/build-in/base-combo#style).

![](figures/combo.png){fig-align="center" width=50%}

#### Main graphic properties

These properties are used to define the main graphic [style](https://g6.antv.antgroup.com/en/manual/element/combo/build-in/base-combo#style) of the combo that depend when it is expanded or not, such as color, width, and line type. They can be applied at the global combo option level or at the individual combo level. Here is an example of how to set the color for all combo of the same graph:

```{r}
combos <- data.frame(id = c("combo1"))
nodes <- data.frame(
  id = as.character(1),
  combo = c("combo1")
)
g6(nodes, combos = combos, height = "200px") |>
  g6_layout(d3_force_layout()) |>
  g6_options(
    combo = list(
      style = list(
        fill = "#FFB6C1", # Combo fill color
        fillOpacity = 0.5, # Combo fill opacity
        stroke = "#000", # Combo border color
        lineWidth = 2, # Combo border width
        collapsedFill = "pink",
        collapsedStroke = "pink",
        collapsedSize = 10 # Default is 32
      )
    )
  ) |>
  g6_behaviors(
    collapse_expand(),
    drag_element()
  )
```

#### Label styling

Some common properties include label [styling](https://g6.antv.antgroup.com/en/manual/element/combo/build-in/base-combo#label-style):

```{r}
combos <- data.frame(id = c("combo1"))
nodes <- data.frame(
  id = as.character(1),
  combo = c("combo1")
)
g6(nodes, combos = combos, height = "200px") |>
  g6_layout(d3_force_layout()) |>
  g6_options(
    combo = list(
      style = list(
        label = TRUE, # Whether to display the combo label
        labelText = "Combo Name", # Label text content
        labelFill = "#000", # Label text color
        labelFontSize = 12, # Label font size
        labelFontWeight = "normal", # Label font weight
        labelPlacement = "bottom", # Position of the label relative to the main graphic of the combo
        labelBackground = TRUE, # Whether to display the combo label background
        labelBackgroundFill = "#000", # Label background fill
        labelBackgroundRadius = 10, # Label background corner radius
        labelBackgroundFillOpacity = 0.5 # Label background fill color opacity
      )
    )
  ) |>
  g6_behaviors(
    collapse_expand(),
    drag_element()
  )
```

### Color palette

```{r}
g6(poke$nodes, poke$edges, poke$combos) |>
  g6_layout(combo_combined_layout(spacing = 50)) |>
  g6_options(
    animation = FALSE,
    node = list(
      style = list(
        labelText = JS(
          "(d) => {
            return d.data.label
          }"
        )
      )
    ),
    edge = list(
      style = list(endArrow = TRUE)
    ),
    combo = list(
      style = list(
        fillOpacity = 0.5
      ),
      palette = list(
        type = "group", # use discret palette
        field = "family",
        color = "spectral"
      )
    )
  ) |>
  g6_behaviors(
    zoom_canvas(),
    collapse_expand(),
    drag_element()
  )
```